from io import BytesIO
from docx import Document
from fpdf import FPDF

from docx import Document
from io import BytesIO

# def save_to_word(content):
#     doc = Document()

#     # Handle tuple or single string inputs
#     if isinstance(content, str):
#         doc.add_paragraph(content)
#     elif isinstance(content, (list, tuple)):
#         for para in content:
#             if isinstance(para, str):
#                 doc.add_paragraph(para)
#             else:
#                 doc.add_paragraph(str(para))  # Fallback in case it's not a string
#     else:
#         # If it's some unexpected type, just convert it to string
#         doc.add_paragraph(str(content))

#     buffer = BytesIO()
#     doc.save(buffer)
#     buffer.seek(0)
#     return buffer


# from fpdf import FPDF
# from io import BytesIO

# def save_to_pdf(text):
#     # Handle CrewOutput object if passed
#     if hasattr(text, "output"):
#         text = text.output

#     if not isinstance(text, str):
#         text = str(text)

#     pdf = FPDF()
#     pdf.add_page()
#     pdf.set_font("Arial", size=12)

#     for line in text.split('\n'):
#         pdf.multi_cell(0, 10, line)

#     buffer = BytesIO()
#     # Output PDF content as a byte string, write it to buffer
#     pdf_bytes = pdf.output(dest='S').encode('latin1')  # 'S' means return as string
#     buffer.write(pdf_bytes)
#     buffer.seek(0)
#     return buffer

from docx import Document
from io import BytesIO

def save_to_word(text, version_info="v1.0"):
    if hasattr(text, "output"):
        text = text.output
    if not isinstance(text, str):
        text = str(text)

    doc = Document()
    for paragraph in text.split('\n'):
        doc.add_paragraph(paragraph)
    
    # Add version info as a footer or last paragraph
    doc.add_paragraph(f"\n---\nGenerated by AI Grant Writing Assistant â€” Version: {version_info}")

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

from fpdf import FPDF
from io import BytesIO

def save_to_pdf(text, version_info="v1.0"):
    if not isinstance(text, str):
        text = str(text)

    # Replace non-latin1 characters with ASCII equivalents or remove them
    def clean_text_for_pdf(s):
        replacements = {
            "\u2014": "-",   # em-dash to hyphen
            "\u2013": "-",   # en-dash to hyphen
            # add more replacements as needed
        }
        for k, v in replacements.items():
            s = s.replace(k, v)
        # Alternatively, you can encode/decode ignoring errors:
        # s = s.encode('latin1', 'replace').decode('latin1')
        return s

    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    for line in text.split('\n'):
        pdf.multi_cell(0, 10, clean_text_for_pdf(line))

    pdf.set_y(-30)
    pdf.set_font("Arial", 'I', 10)
    pdf.cell(0, 10, clean_text_for_pdf(f"Generated by AI Grant Writing Assistant - Version: {version_info}"), 0, 0, 'C')

    buffer = BytesIO()
    pdf_bytes = pdf.output(dest='S').encode('latin1')
    buffer.write(pdf_bytes)
    buffer.seek(0)
    return buffer


